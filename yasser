#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <vector>
#include <stdlib.h>     /* abs */
#include<math.h>
using namespace std;
class pos { public:
    int x; int y;
    void setPos(int nX,int nY)
    {
        x=nX;
        y=nY;
    }
    };

class ride
{

    public:
    pos startPos;
    pos finishPos;
    int earlStart;
    int lateFinish;
    int takken;
    int index;
    ride(){takken=0;}

};
class car {
    public:
pos currentPos;
int timeRequired;
ride *  pCurrentRide;
int noRides;
vector <int> indeces;
 car()
 {
     currentPos.setPos(0,0);
     pCurrentRide =NULL;
     noRides = 0;
 }
 int isAvailable()
 {
    if(pCurrentRide!=NULL)
        return 1;
    return 0;
 }
 int handleRide(ride& nRide)
 {
      pCurrentRide =&nRide;
      timeRequired=abs(this->currentPos.x - nRide.startPos.x)+
                abs(this->currentPos.y-nRide.startPos.y)+
                abs(nRide.startPos.x-nRide.finishPos.x)+
                abs(nRide.startPos.y-nRide.finishPos.y);
      nRide.takken=1;
 }
  int update()
  {
     timeRequired--;
     if (timeRequired==0)
        {
            currentPos=pCurrentRide->finishPos;
            pCurrentRide=NULL;
        }
     if(timeRequired<0)
            timeRequired=0;
     }
 int cancelRide(){
   pCurrentRide->takken=0;
   pCurrentRide=NULL;
 }
 int distanceFrom(pos & nPos)
 {
     int distance=0;
     distance=abs(currentPos.x-nPos.x)+abs(currentPos.y-nPos.y);
     return distance;
 }
};

 int timeTakenBy( ride & nRide,car & nCar){
       int timeTAkken=0;
       timeTAkken=abs(nCar.currentPos.x - nRide.startPos.x)+
                abs(nCar.currentPos.y-nRide.startPos.y)+
                abs(nRide.startPos.x-nRide.finishPos.x)+
                abs(nRide.startPos.y-nRide.finishPos.y);
        return timeTAkken;
    }
    
int main(int argv, char* argc[])
{
    if (argv>1)
	{
		ifstream infile(argc[1]);//("C:\\Users\\OmarAli\\Desktop\\HashCode\\a_example.in");//(argc[1]);
		string sFile="", temp, str;
		stringstream ss, ssEachRide;
		int token, tokenArray[6], i=0, arrEachRide[6], k=0;
		getline(infile, str);
		ss << str;
		while(ss >> token)
        {
            tokenArray[i] = token;
            i++;
        }
        int R = tokenArray[0],
            C = tokenArray[1],
            F = tokenArray[2],
            N = tokenArray[3],
            B = tokenArray[4],
            T = tokenArray[5];
        //cout << tokenArray[0];
        //cout << R << C << F << N << B << T;
        vector <ride> rides;
        rides.reserve(N);
		while (getline(infile, temp))
		{
			//if (temp.find("\r") != -1) temp.replace(temp.find("\r"), 2, ""); //for linux
			//stringstream ss(temp);
			//cout <<  endl << temp ;
			stringstream ssEachRide;
			ssEachRide << temp;
			i = 0;
			while(ssEachRide >> token)
            {
                arrEachRide[i] = token;
                i++;
            }
            // fill the struct
            ride xRide;
            xRide.startPos.setPos(arrEachRide[0], arrEachRide[1]);
            xRide.finishPos.setPos(arrEachRide[2], arrEachRide[3]);
            xRide.earlStart = arrEachRide[4];
            xRide.lateFinish = arrEachRide[5];
            xRide.index = k;
            rides.push_back(xRide); 
            k++;
		}
		infile.close();
		vector <car> cars;
		cars.reserve(F);
		sort(rides.begin(), rides.end(), compare);
		for(int t=0 ; t<T ; t++)
        {
            for(int r=0 ; r<rides.size() ; r++)
            {
                for(int c=0 ; c<F ; c++)
                {
                    if(cars[c].isAvailable())
                    {
                        cars[c].handleRide(rides[r]);
                        cars[c].noRides++;
                        cars[c].indeces.push_back(rides[r].index);
                        break;
                    }
                }
                for(int u=0 ; u<F ; u++)
                {
                    cars[u].update();
                }
            }
        }
        ofstream ofile();
        if(ofile.is_open())
        {
            for(int i)
        }
	}
    return 0;
}
